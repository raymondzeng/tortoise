Tor Texting Project(Think of clever name)
Networking - tor (assume orbit then implement hard channel)
NFC - Key Exchange (assume naive key exchange protocol then implement modified DH)
ECC - security
GUI/Android



Precondition: input is key and stream of bits
Postcondition: output is encrypted with key
Function: Encrypt

Precondition: input is encrypted stream of bits and key
Postcondition: output is original stream of bits
Function: Decrypt

Precondition: Sufficient Random Number Generator
Postcondition: output is set of keys (if asym) or key (if sym)
Function: Gen Key_Pair / Gen Key

Precondition: user id, encrypted data to send
Postcondition: Disconnected TCP traffic, traffice sent 
Function: Network Traffic

Precondition: |Location A - Location B| < Max_Distance, Sensor A is off/idle,
Postcondition: Sensor A is off/idle, user added to user list or timed out looking for Sensor B
Function: Obtain User

Precondition: 2 sets of keys established, communication channel established
Postcondition: public keys transferred following KE protocol, communication channel de-established
Function: key exchange

Precondition:
Postcondition:
Function:


stream of data bits = {random M pad, userid of receiver, text_bits, random N pad}

Key Exchange Protocol:
DH protocol (open policy first then implement DH if time left over)

Sender - > Server - > Receiver Model (P2S2P)
encrypt bits with public key of receiver
encrypt bits with private key of sender
send data to server
server retrieves address from secured list
server sends data to address
receiver decrypts with private key of receiver
receiver decrypts with public key of sender

Sender -> Receiver Model (P2P)
encrypt bits with public key of receiver
encrypt bits with private key of sender
send data to delocalized address point
route through orbit/tor
receiver decrypts with his private key
receiver decrypts with your public key
